[build-system]
requires = ["setuptools >= 74.1.2"]
build-backend = "setuptools.build_meta"


[project]
name = "whispering_fire"
requires-python = ">=3.12"
dynamic = ["version"]
dependencies = [
    "fastapi",
    "uvicorn",
    "httpx",
    "opentelemetry-distro==0.50b0",
    "opentelemetry-exporter-gcp-trace",
    "opentelemetry-instrumentation-httpx==0.50b0",
    "opentelemetry-instrumentation-fastapi==0.50b0",
    "google-cloud-logging==3.11.3",
    "grpcio==1.67.1",
]
description = "TODO"
readme =  "README.md"

# TODO: upgrade to dependency_groups when available
#   https://peps.python.org/pep-0735/
[project.optional-dependencies]
test = [
    "coverage==7.6.1",
    "docker==7.1.0",
    "pyspelling==2.10",
    "pytest==8.3.3",
    "tox==4.21.2",
    "httpx",
]
lint = [
    "mypy==1.13.0",
    "ruff==0.6.9",
    "whispering_fire[types]",
]
types = [
]
docs = [
    "mike==2.1.3",
    "mkdocs-material==9.5.39",
    "mkdocs==1.6.1",
    "mkdocstrings-python==1.11.1",
]
dev = [
    "whispering_fire[test,lint,docs]",
]
build = [
    "psycopg2==2.9.9",
    "pyinstaller==6.10.0",
    "staticx==0.14.1",
]


[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
fail_under = 10
ignore_errors = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
omit = [
    "tests/conftest.py",
    "tmp/*",
    "build/*",
]


[tool.mypy]
plugins = []
exclude = [
    'build/*',
    'tests/*',
    'venv/*',
    'tmp/*',
]
warn_unused_ignores = true

[[tool.mypy.overrides]]
# module is untyped
module = []
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "--doctest-modules --import-mode=importlib"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "live: mark test as requiring credentials, API keys, or internet services",
    "incremental",
]
norecursedirs=[
    '*.egg',
    '.*',
    'build',
    'dist',
    'venv',
]


[tool.ruff]
line-length = 100

[tool.ruff.format]
docstring-code-format = true
preview = true
quote-style = "single"

[tool.ruff.lint]
preview = true
select = [
    "E4",  # pycodestyle errors 4xx
    "E7",  # pycodestyle errors 7xx
    "E9",  # pycodestyle errors 9xx
    "F",  # pyflakes
    "FAST",  # FastAPI
    "I",  # isoert,
    "N",  # pep8-naming
    "RUF", # ruff-specific rules
    "U",  # pyupgrade
]


[tool.setuptools.dynamic]
version = {attr = "whispering_fire.__version__"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = []



# TODO: upgrade to dependency_groups when available
#   https://tox.wiki/en/latest/config.html#python-run
[tool.tox]
requires = ["tox>=4"]
env_list = ["clean", "lint", "type", "3.12", "report"]

[tool.tox.env_run_base]
description = "Run test under {base_python}"
# default minimum python version for the whole project
base_python = ["python3.12"]
deps = [
    "coverage==7.6.1",
    "docker==7.1.0",
    "pyspelling==2.10",
    "pytest==8.3.3",
    "tox==4.21.2",
    "httpx",
]
pass_env = []
commands = [["coverage", "run", "-a", "-m", "pytest", { replace = "posargs", default = ["--runslow"], extend = true }]]

[tool.tox.env.clean]
description = "Remove previous coverage reports"
deps = [
    "coverage==7.6.1",
]
skip_install = true
commands = [["coverage", "erase"]]

[tool.tox.env.lint]
description = "Run linters"
deps = [
    "ruff==0.6.9",
]
skip_install = true
commands = [
    ["ruff", "format", "--check"],
    ["ruff", "check"],
]

[tool.tox.env.type]
description = "Run type checks"
deps = [
    "mypy==1.11.2",
]
commands = [["mypy", "."]]

[tool.tox.env.report]
description = "Generate coverage report"
deps = [
    "coverage==7.6.1",
]
skip_install = true
commands =[
    ["coverage", "html", "--fail-under=0"],
    ["coverage", "report"],
]
